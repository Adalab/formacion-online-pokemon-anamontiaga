{"version":3,"sources":["components/PokeCard.js","components/PokeList.js","components/Filter.js","components/App.js","services/fetchPokemones.js","index.js"],"names":["PokeCard","props","pokemon","index","className","src","image","alt","name","types","map","type","typeIndex","key","PokeList","pokemones","query","filter","myPokemon","toUpperCase","includes","id","Filter","getQuery","placeholder","onChange","value","App","state","bind","this","getPokemones","fetch","then","response","json","data","url","pokeInfo","item","push","infoPokemon","sprites","front_default","setState","results","event","currentTarget","console","log","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iaAmCeA,G,kBA/BE,SAAAC,GAAU,IACjBC,EAAmBD,EAAnBC,QAASC,EAAUF,EAAVE,MACjB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,wBACb,uBAAGA,UAAU,YAAb,OAA6BD,EAAQ,EAArC,KACA,yBAAKE,IAAKH,EAAQI,MAAOF,UAAU,YAAYG,IAAKL,EAAQM,QAE9D,yBAAKJ,UAAU,yBACb,wBAAIA,UAAU,oBAAoBF,EAAQM,MAC1C,wBAAIJ,UAAU,qBACXF,EAAQO,MAAMC,KAAI,SAACC,EAAMC,GACxB,OACE,wBAAIR,UAAU,mBAAmBS,IAAKD,GACnCD,WCQFG,EArBE,SAAAb,GAAU,IACjBc,EAAqBd,EAArBc,UAAWC,EAAUf,EAAVe,MACnB,OACE,wBAAIZ,UAAU,aACXW,EACEE,QAAO,SAAAC,GAAS,OAAIA,EAAUV,KAAKW,cAAcC,SAASJ,EAAMG,kBAChET,KAAI,SAACR,EAASC,GACb,OACE,wBAAIC,UAAU,kBAAkBiB,GAAIlB,EAAQ,EAAGU,IAAKV,EAAQ,GAC1D,kBAAC,EAAD,CAAUD,QAASA,EAASC,MAAOA,UCIlCmB,G,MAdA,SAAArB,GAAU,IACfsB,EAAoBtB,EAApBsB,SAAUP,EAAUf,EAAVe,MAClB,OACE,yBAAKZ,UAAU,eACb,2BAAOO,KAAK,OAAOP,UAAU,qBAAqBoB,YAAY,gCAAgCC,SAAUF,EAAUG,MAAOV,OCgEhHW,E,YAhEb,WAAY1B,GAAQ,IAAD,8BACjB,4CAAMA,KACD2B,MAAQ,CACXb,UAAW,GACXC,MAAO,IAET,EAAKO,SAAW,EAAKA,SAASM,KAAd,gBANC,E,iFAUjBC,KAAKC,iB,qCAGS,IAAD,OClBRC,MAHQ,yDAGQC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UDmB9BF,MAAK,SAAAG,GAAS,IAAD,uBAC5B,IAD4B,IAC5B,EAD4B,iBACnBlC,EADmB,QAE1B8B,MAAM9B,EAAQmC,KACXJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAK,GACJ,IAAM7B,EAAQ,GADE,uBAEhB,YAAiB6B,EAAS7B,MAA1B,+CAAiC,CAAC,IAAzB8B,EAAwB,QAC/B9B,EAAM+B,KAAKD,EAAK5B,KAAKH,OAHP,kFAKhB,IAAMiC,EAAc,CAClBjC,KAAMN,EAAQM,KACdF,MAAOgC,EAASI,QAAQC,cACxBlC,MAAOA,GAET,EAAKmC,SAAS,CAAE7B,UAAU,GAAD,mBAAM,EAAKa,MAAMb,WAAjB,CAA4B0B,UAb3D,EAAoBL,EAAKS,QAAzB,+CAAmC,IADP,wF,+BAoBvBC,GACP,IAAM9B,EAAQ8B,EAAMC,cAAcrB,MAClCI,KAAKc,SAAS,CAAE5B,MAAOA,M,+BAIf,IAAD,EACsBc,KAAKF,MAA1Bb,EADD,EACCA,UAAWC,EADZ,EACYA,MAGnB,OAFAgC,QAAQC,IAAIlC,GAGV,yBAAKX,UAAU,OACb,yBAAKA,UAAU,gCACf,yBAAKA,UAAU,+BACf,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,8BACf,yBAAKA,UAAU,8BAEjB,kBAAC,EAAD,CAAQmB,SAAUO,KAAKP,SAAUP,MAAOA,IACxC,kBAAC,EAAD,CAAUD,UAAWA,EAAWC,MAAOA,S,GAtD7BkC,IAAMC,WEDxBC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.45af94e0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../stylesheets/PokeCard.scss\";\nimport PropTypes from \"prop-types\";\n\nconst PokeCard = props => {\n  const { pokemon, index } = props;\n  return (\n    <div className=\"card\">\n      <div className=\"card__img--container\">\n        <p className=\"card__id\">ID /{index + 1} </p>\n        <img src={pokemon.image} className=\"card__img\" alt={pokemon.name}></img>\n      </div>\n      <div className=\"card__info--container\">\n        <h2 className=\"card__info--name\">{pokemon.name}</h2>\n        <ul className=\"card__info--types\">\n          {pokemon.types.map((type, typeIndex) => {\n            return (\n              <li className=\"card__info--type\" key={typeIndex}>\n                {type}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nPokeCard.propTypes = {\n  pokemon: PropTypes.object.isRequired,\n  type: PropTypes.string,\n  index: PropTypes.number.isRequired,\n  typeIndex: PropTypes.number\n};\n\nexport default PokeCard;\n","import React from \"react\";\nimport \"../stylesheets/PokeList.scss\";\nimport PropTypes from \"prop-types\";\nimport PokeCard from \"./PokeCard.js\";\n\nconst PokeList = props => {\n  const { pokemones, query } = props;\n  return (\n    <ul className=\"pokemones\">\n      {pokemones\n        .filter(myPokemon => myPokemon.name.toUpperCase().includes(query.toUpperCase()))\n        .map((pokemon, index) => {\n          return (\n            <li className=\"pokemones__item\" id={index + 1} key={index + 1}>\n              <PokeCard pokemon={pokemon} index={index} />\n            </li>\n          );\n        })}\n    </ul>\n  );\n};\n\nPokeList.propTypes = {\n  pokemones: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nexport default PokeList;\n","import React from \"react\";\nimport \"../stylesheets/Filter.scss\";\nimport PropTypes from \"prop-types\";\n\nconst Filter = props => {\n  const { getQuery, query } = props;\n  return (\n    <div className=\"app__filter\">\n      <input type=\"text\" className=\"app__filter--input\" placeholder=\"Filtra pokemons por nombre...\" onChange={getQuery} value={query} />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  getQuery: PropTypes.func.isRequired,\n  query: PropTypes.string.isRequired\n};\n\nexport default Filter;\n","import React from \"react\";\nimport \"../stylesheets/App.scss\";\nimport { fetchPokemones } from \"../services/fetchPokemones\";\nimport PokeList from \"./PokeList.js\";\nimport Filter from \"./Filter.js\";\nimport PropTypes from \"prop-types\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pokemones: [],\n      query: \"\"\n    };\n    this.getQuery = this.getQuery.bind(this);\n  }\n\n  componentDidMount() {\n    this.getPokemones();\n  }\n\n  getPokemones() {\n    fetchPokemones().then(data => {\n      for (let pokemon of data.results) {\n        fetch(pokemon.url)\n          .then(response => response.json())\n          .then(pokeInfo => {\n            const types = [];\n            for (let item of pokeInfo.types) {\n              types.push(item.type.name);\n            }\n            const infoPokemon = {\n              name: pokemon.name,\n              image: pokeInfo.sprites.front_default,\n              types: types\n            };\n            this.setState({ pokemones: [...this.state.pokemones, infoPokemon] });\n            // si pokemones está vacío, para qué repetirlo? ¿porque estamos metiendo un objeto dentro de un array?\n          });\n      }\n    });\n  }\n  getQuery(event) {\n    const query = event.currentTarget.value;\n    this.setState({ query: query });\n    // meterle aqui una condicional que compare los dos primeros caracteres de query y de myPokemon.name -tendría que subirlo por lifting-\n  }\n\n  render() {\n    const { pokemones, query } = this.state;\n    console.log(pokemones);\n\n    return (\n      <div className=\"app\">\n        <div className=\"background__triangle--right\"></div>\n        <div className=\"background__triangle--left\"></div>\n        <div className=\"background__circle\">\n          <div className=\"background__circle--right\"></div>\n          <div className=\"background__circle--left\"></div>\n        </div>\n        <Filter getQuery={this.getQuery} query={query} />\n        <PokeList pokemones={pokemones} query={query} />\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  pokemones: PropTypes.arrayOf(PropTypes.object),\n  query: PropTypes.string\n};\n\nexport default App;\n","const endpoint = \"https://pokeapi.co/api/v2/pokemon/?offset=25&limit=25\";\n\nconst fetchPokemones = () => {\n  return fetch(endpoint).then(response => response.json());\n};\n\nexport { fetchPokemones };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"./stylesheets/index.scss\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}